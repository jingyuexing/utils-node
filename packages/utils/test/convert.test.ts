import { convert, numberToString, stringToNumber, toChineseNumber, hexStringToBufferConverter, bufferToHexStringConverter } from '@/convert';
import { toUnit } from '@/string';
import { describe, expect, it } from 'vitest';

describe("convert testing", () => {
   const { weight, storage, netSpeed } = convert()
   it("convert weight test case", () => {
      expect(weight(1000, "g", "kg")).eq(1, "1000g should be 1kg")
      expect(weight(1, "kg", "g")).eq(1000, "1kg should be 1000g")
      expect(weight(1, "kg", "g")).eq(1000, "1kg should be 1000g")
      expect(weight(1000, "kg", "t")).eq(1, "1000kg should be 1t")
   })
   it("convert storage unit test case", () => {
      expect(storage(1024, "KB", "MB")).eq(1, "1024KB should be 1MB")
      expect(storage(1024, "MB", "GB")).eq(1, "1024MB should be 1GB")
      expect(storage(1024, "GB", "TB")).eq(1, "1024GB should be 1TB")
      expect(storage(1024, "TB", "PB")).eq(1, "1024TB should be 1PB")
      expect(storage(33, "MB", "KB")).eq(33792, "33MB should be 33792KB")
   })
   it("convert net speet unit test case", () => {
      expect(netSpeed(300, "Kbps", "Gbps"))
   })
   it("test number convert", () => {
      const { numeralSystemConverter } = convert()
      expect(numeralSystemConverter(1, "兆", "京")).eq(0.1)
      expect(numeralSystemConverter(1, "京", "兆")).eq(10)
      expect(numeralSystemConverter(1, "个", "百")).eq(0.01)
      expect(numeralSystemConverter(1, "百", "个")).eq(100)
   })
   it("test to chinese number", () => {
      expect(toChineseNumber(123)).eq("一百二十三")
      expect(toChineseNumber(100)).eq("一百")
      expect(toChineseNumber(20)).eq("二十")
      expect(toChineseNumber(21)).eq("二十一")
      expect(toChineseNumber(101)).eq("一百零一")
      expect(toChineseNumber(1001)).eq("一千零一")
      expect(toChineseNumber(10001)).eq("一万零一")
      expect(toChineseNumber(369)).eq("三百六十九")
      expect(toChineseNumber(891290)).eq("八十九万一千二百九十")
      expect(toChineseNumber(8865490)).eq("八百八十六万五千四百九十")
      // expect(toChineseNumber(1_2886_5490)).eq("一亿二千八百八十六万五千四百九十")
      // expect(toChineseNumber(1128865490)).eq("一十一亿二千八百八十六万五千四百九十")
      // expect(toChineseNumber(11128865490)).eq("一百一十一亿二千八百八十六万五千四百九十")
      // test upper case
      expect(toChineseNumber(369, 10, true)).eq("叁佰陆拾玖")
      expect(toChineseNumber(10001, 10, true)).eq("壹萬零壹")
      expect(toChineseNumber(8960, 10, true)).eq("捌仟玖佰陆拾")
      expect(toChineseNumber(7_8960, 10, true)).eq("柒萬捌仟玖佰陆拾")
      expect(toChineseNumber(77_8960, 10, true)).eq("柒拾柒萬捌仟玖佰陆拾")
      expect(toChineseNumber(777_8960, 10, true)).eq("柒佰柒拾柒萬捌仟玖佰陆拾")
      expect(toChineseNumber(7777_8960, 10, true)).eq("柒仟柒佰柒拾柒萬捌仟玖佰陆拾")
      expect(toChineseNumber(3_3689, 10, true)).eq("叁萬叁仟陆佰捌拾玖")
      expect(toChineseNumber(833689, 10, true)).eq("捌拾叁萬叁仟陆佰捌拾玖")
      expect(toChineseNumber(893_3689, 10, true)).eq("捌佰玖拾叁萬叁仟陆佰捌拾玖")
      expect(toChineseNumber(2893_3689, 10, true)).eq("贰仟捌佰玖拾叁萬叁仟陆佰捌拾玖")
      // expect(toChineseNumber(8_2893_3689,10,true)).eq("捌亿贰仟捌佰玖拾叁萬叁仟陆佰捌拾玖") // not pass
      // expect(toChineseNumber(88_2893_3689,10,true)).eq("捌拾捌亿贰仟捌佰玖拾叁萬叁仟陆佰捌拾玖") // not pass
   })

   it("testing number to string", () => {
      expect(numberToString(100)).eq("100")
      expect(numberToString(900)).eq("900")
      expect(numberToString(100000000000000000000)).eq("100000000000000000000")
      expect(numberToString(255, 16)).eq("FF")
      expect(numberToString(16, 16)).eq("10")
      expect(numberToString(10, 16)).eq("A")
      expect(numberToString(11, 16)).eq("B")
      expect(numberToString(12, 16)).eq("C")
      expect(numberToString(13, 16)).eq("D")
      expect(numberToString(14, 16)).eq("E")
      expect(numberToString(15, 16)).eq("F")
      expect(numberToString(88, 16)).eq("58")
      expect(numberToString(88, 26)).eq("3A")
      expect(numberToString(19336820, 26)).eq("1G84JM")
      expect(numberToString(255, 2)).eq("11111111")
      expect(numberToString(3, 3)).eq("10")
      expect(numberToString(2, 3)).eq("2")
      expect(numberToString(88, 3)).eq("10021")
      expect(numberToString(1999999999368209, 40)).eq("7P719dU559")
   })
   it("testing string to number", () => {
      expect(stringToNumber("100")).eq(100)
      expect(stringToNumber("200")).eq(200)
      expect(stringToNumber("400")).eq(400)
      expect(stringToNumber("F", 16)).eq(15)
      expect(stringToNumber("1G84JM", 62)).eq(1154477408)
      // expect(stringToNumber("7p719Du559", 40)).eq(1999999999368209)
      expect(stringToNumber("8888", 40)).eq(525128)
      expect(stringToNumber("90", 40)).eq(360)
      expect(stringToNumber("FF", 16)).eq(255)
      expect(stringToNumber("ff", 16)).eq(255)
      expect(stringToNumber("111", 2)).eq(7)
      expect(stringToNumber("1111", 2)).eq(15)
      expect(stringToNumber("12", 15)).eq(17)
      expect(stringToNumber("A", 15)).eq(10)
      expect(stringToNumber("CN", 40)).eq(503)
   })
   it("test hex convert", () => {
      let buf = hexStringToBufferConverter("0x6dac2455e99bee641660bf61d3b8cd2a5df90f954b9e138a9b289bb95110ed73aa07e83d227c30ef3cf363fc2779a275c8b490c13fc02d8f69d1c2bb0aaf9b0e633e9dfb3db21cae519b8c08a15341700c973f54356476010192cc8a9b2489f4c9af3b22b9f9bacbc49aec266eda8a3da30ff6e6c0d914a864bc656dbf596972")
      console.log(buf)
      expect(buf.at(0)).eq(0x6d)
      expect(buf.at(1)).eq(0xac)
   })
   it("test buffer to string", () => {
      let buf = hexStringToBufferConverter("0x6dac2455e99bee641660bf61d3b8cd2a5df90f954b9e138a9b289bb95110ed73aa07e83d227c30ef3cf363fc2779a275c8b490c13fc02d8f69d1c2bb0aaf9b0e633e9dfb3db21cae519b8c08a15341700c973f54356476010192cc8a9b2489f4c9af3b22b9f9bacbc49aec266eda8a3da30ff6e6c0d914a864bc656dbf596972")
      expect(bufferToHexStringConverter(buf)).eq("6dac2455e99bee641660bf61d3b8cd2a5df90f954b9e138a9b289bb95110ed73aa07e83d227c30ef3cf363fc2779a275c8b490c13fc02d8f69d1c2bb0aaf9b0e633e9dfb3db21cae519b8c08a15341700c973f54356476010192cc8a9b2489f4c9af3b22b9f9bacbc49aec266eda8a3da30ff6e6c0d914a864bc656dbf596972")
   })
})
